<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="Project 4" id="8279bbe4-44c1-4871-adb4-e290b37222fe" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con:property propagates="true" key="ProjectItem.statisticNumberOfAutosaves" type="java.lang.Long">5</con:property></con:properties><con:attributes><con:property key="gui.statistics.view">statistics.manage</con:property><con:property key="miniature">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
</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="92d3e395-48ab-49d1-8974-698b5416b7bc"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">/Users/rwinzing/Documents/NodeJS-Buch/code/sandbox/rwi/soap/04-soap-soapui-project.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String">../Documents/NodeJS-Buch/code/sandbox/rwi/soap/04-soap-soapui-project.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">/Users/rwinzing/soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File">/Users/rwinzing/Documents/NodeJS-Buch/code/sandbox/rwi/soap/04-soap-soapui-project.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">HelloWorld_Client_8080_TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">HelloWorld TestCase</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">905</con:property><con:property key="gui.layoutY">299</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="0ce40bb3-7f5e-415c-9d37-f38dbafe68b8" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @id com.eviware.Ramp
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )

direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

scheduled = false
future = null

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
//		if (start.value != 0) {
//			if (msPerUnit/start.value > period.value * 1000) {
//				targetReached = true
//				currentRate = end.value
//			}
//		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) { 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			}
			else { 
				currentDelay = 1 //Handling edge cases
			}
		} 
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

onAction( "START" ) { schedule() }

onAction( "STOP" ) {
	future?.cancel()
	started = false
	scheduled = false
}

onAction( "COMPLETE" ) { reset() }

//Layout
layout  { 
	property( property:start, label:'Start', min:0 )
	property( property:end, label:'End', min:0 )
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', content: { "${currentRate.longValue()} / $unit.value $direction" }, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', content: { "${currentRate.longValue()} / $unit.value $direction" } )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="start" type="java.lang.Long">11</con:property><con:property propagates="true" key="end" type="java.lang.Long">62</con:property><con:property propagates="true" key="period" type="java.lang.Long">10</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_digest">3e1518dec707a9129b715eccefcde3da</con:property><con:property key="_id">com.eviware.Ramp</con:property><con:property key="_classLoader">com.eviware.Ramp</con:property><con:property key="gui.layoutX">309</con:property><con:property key="gui.layoutY">170</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="fc1a7458-12f7-4d33-8daf-d30c5870c19c" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.3
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import com.eviware.loadui.api.events.ActionEvent
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent
import java.text.SimpleDateFormat

import com.eviware.loadui.api.summary.MutableSection

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

createProperty( 'maxRows', Long, 1000 ) { value ->
	myTableModel.maxRow = value
}
createProperty 'logFilePath', String
createProperty 'saveFile', Boolean, false
createProperty( 'follow', Boolean, false ) { value ->
	if( myTableModel.follow != value as Boolean ) myTableModel.follow = value
}
createProperty( 'enabledInDistMode', Boolean, false ) { value ->
	if( myTableModel.enabledInDistMode != value as Boolean ) myTableModel.enabledInDistMode = value
}
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false
createProperty 'formatTimestamps', Boolean, true
createProperty 'addHeaders', Boolean, false

def latestHeader

myTableModel = new LTableModel(1000, follow.value as Boolean, enabledInDistMode.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateProperties()
	}
});

String saveFileName = null

writer = null
def formater = new SimpleDateFormat( "HH:mm:ss:SSS" )
myTableModel.maxRow = maxRows.value

updateProperties = {
	follow.value = myTableModel.follow
	enabledInDistMode.value = myTableModel.enabledInDistMode
}

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	def writeLog = saveFile.value && saveFileName
	if( controller || writeLog ) {
		message.keySet().each { k -> myTableModel.addColumn( k ) }
		lastMsgDate = new Date();
		
		if ( formatTimestamps.value ) {
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) {
					try {
						message[key] = formater.format( new Date( value ) )
					} catch ( IllegalArgumentException e ) {
						log.info( "Failed to format Timestamp in a column whose name hinted about it containing a Timestamp" )
					}
				}
			}
		}

		result = myTableModel.addRow( message )
		if( writeLog && result ) {
			if( writer == null ) {
				writer = new CSVWriter( new FileWriter( saveFileName, appendSaveFile.value ), (char) ',' );
			}
			try {
				String[] header = myTableModel.header
				if( addHeaders.value && !Arrays.equals( latestHeader, header ) ) {
					writer.writeNext( header )
					latestHeader = header
				}
				String[] entries = myTableModel.lastRow
				writer.writeNext( entries )
			} catch ( Exception e ) {
				log.error( "Error writing to log file", e )
			}
		}
	}
	
	if( ! controller && myTableModel.enabledInDistMode ) {
		// on agent and enabled, so send message to controller
		send( controllerTerminal, message )
	}
}

onAction( "START" ) { buildFileName() }

onAction( "COMPLETE" ) {
	writer?.close()
	writer = null
}

onAction( "RESET" ) {
	myTableModel.reset()
	buildFileName()
}

onRelease = {
	writer?.close()
}

buildFileName = {
	if( !saveFile.value ) {
		writer?.close()
		writer = null
		return
	}
	if( writer != null ) {
		return
	}
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath( filePath ) ) {
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn( "Log file path wasn't specified properly. Try default path: [$filePath]" )
		if( !validateLogFilePath( filePath ) ) {
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ) {
		def f = new File( filePath )
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File( filePath ).parentFile.mkdirs()
	saveFileName = filePath
}

getBaseLogDir = {
	def dir = System.getProperty("loadui.home")
	if(dir == null || dir.trim().length() == 0) {
		dir = "."
	}
	return dir
}
				
getDefaultLogFileName = {
	return getLabel().replaceAll( " ","" )
}
				
validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path 
		// is correct is to try read and writing
		def temp = new File( filePath )
		temp.parentFile.mkdirs()
		if( !temp.exists() ) {
			def fos = new FileOutputStream( temp )
			fos.write( [0] )
			fos.close()
			temp.delete()
		} else {
			def fis = new FileInputStream( temp )
			fis.read()
			fis.close()
		}
		return true
	}
	catch( Exception e ) {
		return false
	}	
}

addTimestampToFileName = { name ->
	def ext = ""
	def ind = name.lastIndexOf( "." )
	if( ind > -1 ){
		ext = name.substring( ind, name.length() )
		name = name.substring( 0, ind )
	}
	def timestamp = new Date().time
	if( name.length() > 0 ) {
		name = "${name}-"
	}
	return "$name$timestamp$ext"
}

layout { 
	node( widget: 'tableWidget', model: myTableModel ) 
}

compactLayout {
	box( widget: 'display' ) {
		node( label: 'Rows', content: { myTableModel.rowCount } )
		node( label: 'Output File', content: { saveFileName ?: '-' } )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: logFilePath, label: 'Log File (Comma separated, relative to loadUI home dir)' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		property(property: formatTimestamps, label: 'Check to format timestamps(hh:mm:ss:ms)')
		property(property: addHeaders, label: 'Check to add headers to a file')
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if( summaryRows.value > 0 ) {
   	MutableSection sect = chapter.addSection( getLabel() )
   	sect.addTable( getLabel(), myTableModel.getLastRows( summaryRows.value ) )
   }
}]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">1000</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">ac7721974d2dcc8d4bf3924602136155</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">219</con:property><con:property key="gui.layoutY">455</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="0ce40bb3-7f5e-415c-9d37-f38dbafe68b8/triggerTerminal" inputTerminalId="92d3e395-48ab-49d1-8974-698b5416b7bc/triggerTerminal"/><con:connection outputTerminalId="92d3e395-48ab-49d1-8974-698b5416b7bc/resultTerminal" inputTerminalId="fc1a7458-12f7-4d33-8daf-d30c5870c19c/inputTerminal"/><con:statistics><con:page title="General"/></con:statistics></con:loadui-project>